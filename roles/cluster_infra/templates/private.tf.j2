# security group for private instances
resource "openstack_networking_secgroup_v2" "private_tenant" {
  name                 = "{{ cluster_name }}-private"
  delete_default_rules = true
}
resource "openstack_networking_secgroup_rule_v2" "secgroup_private_rule_dns" {
  direction         = "egress"
  ethertype         = "IPv4"
  protocol          = "udp"
  port_range_min    = 53
  port_range_max    = 53
  remote_ip_prefix  = "0.0.0.0/0"
  security_group_id = openstack_networking_secgroup_v2.private_tenant.id
}
{% for ip in vdi_ips %}
resource "openstack_networking_secgroup_rule_v2" "secgroup_private_rule_vdi_ssh_{{ loop.index }}" {
  direction         = "ingress"
  ethertype         = "IPv4"
  protocol          = "tcp"
  port_range_min    = 22
  port_range_max    = 22
  remote_ip_prefix  = "{{ ip }}/32"
  security_group_id = openstack_networking_secgroup_v2.private_tenant.id
}
{% endfor %}
{% for ip in vdi_ips %}
resource "openstack_networking_secgroup_rule_v2" "secgroup_private_rule_vdi_rdp_{{ loop.index }}" {
  direction         = "ingress"
  ethertype         = "IPv4"
  protocol          = "tcp"
  port_range_min    = 3389
  port_range_max    = 3389
  remote_ip_prefix  = "{{ ip }}/32" 
  security_group_id = openstack_networking_secgroup_v2.private_tenant.id
}
{% endfor %}
resource "openstack_networking_secgroup_rule_v2" "secgroup_private_rule_broadcast" {
  direction         = "egress"
  ethertype         = "IPv4"
  protocol          = "udp"
  remote_ip_prefix  = "255.255.255.255/32"
  security_group_id = openstack_networking_secgroup_v2.private_tenant.id
}
resource "openstack_networking_secgroup_rule_v2" "secgroup_private_rule_cloudinit" {
  direction         = "egress"
  ethertype         = "IPv4"
  protocol          = "tcp"
  port_range_min    = 80
  port_range_max    = 80
  remote_ip_prefix  = "169.254.169.254/32"
  security_group_id = openstack_networking_secgroup_v2.private_tenant.id
}
resource "openstack_networking_secgroup_rule_v2" "secgroup_private_rule_gateway" {
  direction         = "egress"
  ethertype         = "IPv4"
  protocol          = "tcp"
  remote_ip_prefix  = "${data.openstack_networking_subnet_v2.tenant_subnet.gateway_ip}/32"
  security_group_id = openstack_networking_secgroup_v2.private_tenant.id
}
resource "openstack_networking_secgroup_rule_v2" "secgroup_private_rule_dnsservers" {
  direction         = "egress"
  ethertype         = "IPv4"
  protocol          = "tcp"
  remote_ip_prefix  = "{{ tenant_network.nameserver }}/32"
  security_group_id = openstack_networking_secgroup_v2.private_tenant.id
}

resource "openstack_networking_port_v2" "priv_private_port" {
  count          = "{{ private_instance_count }}"
  network_id     = openstack_networking_network_v2.private_network.id
  admin_state_up = true
  fixed_ip {
    subnet_id = openstack_networking_subnet_v2.private_subnet.id
  }
}
resource "openstack_networking_port_v2" "priv_tenant_port" {
  count          = "{{ private_instance_count }}"
  network_id     = data.openstack_networking_network_v2.tenant_network.id
  admin_state_up = true 
  fixed_ip {
    subnet_id = data.openstack_networking_subnet_v2.tenant_subnet.id
  }
  security_group_ids = [
    openstack_networking_secgroup_v2.private_tenant.id
  ]
}

resource "openstack_compute_instance_v2" "private_instance" {
  count       = "{{ private_instance_count }}"
  name        = "{{ cluster_name }}-private-${count.index}"
  flavor_id   = "{{ private_instance_flavor }}"
  user_data   = <<-EOT
    #cloud-config
    ssh_authorized_keys:
      - {{ cluster_deploy_ssh_public_key }}
      - {{ cluster_user_ssh_public_key }}
    bootcmd:
      - ip route add 0.0.0.0/0 via ${openstack_networking_port_v2.router_private_port.all_fixed_ips.0}
    {% for ip in vdi_ips %}
  - ip route add {{ ip }} via ${data.openstack_networking_subnet_v2.tenant_subnet.gateway_ip}
    {% endfor %}
EOT

  block_device {
    uuid                  = "{{ cluster_previous_image | default(cluster_image) }}"
    source_type           = "image"
    volume_size           = {{ private_instance_volume }}
    boot_index            = 0
    destination_type      = "volume"
    delete_on_termination = true
  }

  network {
#    name = "{{ tenant_network.name }}"
    port = "${element(openstack_networking_port_v2.priv_tenant_port.*.id, count.index)}"
  }

  network {
    port = "${element(openstack_networking_port_v2.priv_private_port.*.id, count.index)}"
  }

  depends_on = [
    openstack_compute_instance_v2.router
  ]

}

resource "openstack_networking_floatingip_v2" "fl_ip_priv" {
  count = "{{ private_instance_count }}"
  pool  = "{{ cluster_floating_network }}"
}

resource "openstack_compute_floatingip_associate_v2" "fl_ip_priv" {
  count       = "{{ private_instance_count }}"
  floating_ip = "${element(openstack_networking_floatingip_v2.fl_ip_priv.*.address, count.index)}"
  instance_id = "${element(openstack_compute_instance_v2.private_instance.*.id, count.index)}"
}
